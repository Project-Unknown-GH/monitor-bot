declare type EventHandler<T> = (value: T) => void;
/**
 * A typesafe EventEmitter
 * @category Internal
 */
export declare class Emitter<Events extends object> {
    private listeners;
    private addListener;
    emit: <E extends keyof Events>(type: E, data: Events[E]) => void;
    on: <E extends keyof Events>(type: E, handler: EventHandler<Events[E]>) => void;
    once: <E extends keyof Events>(type: E, handler: EventHandler<Events[E]>) => void;
    off: <E extends keyof Events>(type: E, handler: EventHandler<Events[E]>) => void;
    getListenerCount: <E extends keyof Events>(type: E) => number;
    hasListeners: <E extends keyof Events>(type: E) => boolean;
    pipe: <E extends keyof Events, T extends Emitter<Events>>(type: E, emitter: T) => void;
    waitFor: <E extends keyof Events>(type: E) => Promise<Events[E]>;
}
export {};
