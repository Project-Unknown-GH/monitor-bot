"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A typesafe EventEmitter
 * @category Internal
 */
class Emitter {
    constructor() {
        this.listeners = new Map();
        this.emit = (type, data) => {
            const listeners = this.listeners.get(type);
            if (!listeners)
                return;
            const newHandlers = [];
            for (const listener of listeners) {
                listener.handler(data);
                if (!listener.once)
                    newHandlers.push(listener);
            }
            this.listeners.set(type, newHandlers);
        };
        this.on = (type, handler) => {
            this.addListener(type, { handler, once: false });
        };
        this.once = (type, handler) => {
            this.addListener(type, { handler, once: true });
        };
        this.off = (type, handler) => {
            const listeners = (this.listeners.get(type) || []).filter(listener => listener.handler !== handler);
            this.listeners.set(type, listeners);
        };
        this.getListenerCount = (type) => {
            return (this.listeners.get(type) || []).length;
        };
        this.hasListeners = (type) => {
            return this.getListenerCount(type) > 0;
        };
        this.pipe = (type, emitter) => {
            this.on(type, (value) => emitter.emit(type, value));
        };
        this.waitFor = (type) => {
            return new Promise(resolve => {
                this.once(type, value => {
                    resolve(value);
                });
            });
        };
    }
    addListener(type, listener) {
        const listeners = (this.listeners.get(type) || []).filter(l => l.handler !== listener.handler);
        this.listeners.set(type, [...listeners, listener]);
    }
}
exports.Emitter = Emitter;
//# sourceMappingURL=Emitter.js.map