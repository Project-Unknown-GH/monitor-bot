"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const composeMiddleware_1 = require("./composeMiddleware");
/**
 * This composes a chain and manages context to make sure
 * each context is correct based on the level in the chain
 * @ignore
 */
exports.composeChain = (chain) => {
    let globalContext = chain[0].context;
    const middleware = chain.map(entry => {
        const { command, context } = entry;
        const middleware = composeMiddleware_1.composeMiddleware(command.middleware);
        const safeContext = Object.assign({}, globalContext, context);
        return (_, next) => __awaiter(this, void 0, void 0, function* () {
            const response = yield middleware(safeContext, () => {
                globalContext = safeContext;
                if (next)
                    return next();
            });
            return response;
        });
    });
    const composed = composeMiddleware_1.composeMiddleware(middleware);
    return () => __awaiter(this, void 0, void 0, function* () {
        return composed(globalContext);
    });
};
//# sourceMappingURL=composeChain.js.map