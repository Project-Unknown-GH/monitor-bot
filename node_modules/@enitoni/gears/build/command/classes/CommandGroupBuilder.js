"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CommandGroup_1 = require("./CommandGroup");
const helpers_1 = require("../../core/helpers");
/**
 * A way to build a [[CommandGroup]] with the builder pattern.
 * If you are using TypeScript, this is more typesafe to use
 * @example
 * const group = new CommandGroupBuilder()
 *   .match(matchAlways())
 *   .setCommands(sum, multiply)
 *   .use(() => {
 *     console.log("I am a piece of middleware")
 *   })
 *   .done()
 *
 * // Input: "sum 1 2 3 4"
 * // Output: "I am a piece of middleware"
 * // Output: "The sum is: 10"
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @template S State
 * @category Command
 */
class CommandGroupBuilder {
    constructor() {
        this.commands = [];
        this.middleware = [];
    }
    /**
     * Set [[Matcher]]
     */
    match(matcher) {
        helpers_1.assert(!this.matcher, "Cannot use match() more than once");
        this.matcher = matcher;
        return this;
    }
    setMetadata(data) {
        this.metadata = data;
        return this;
    }
    /**
     * Add [[Middleware]]. The order that you call this is the order the middleware will be in
     */
    use(middleware) {
        this.middleware.push(middleware);
        return this;
    }
    /**
     * Set the commands for this [[CommandGroup]]
     */
    setCommands(...commands) {
        this.commands = commands;
        return this;
    }
    done() {
        helpers_1.assert(!!this.matcher, "No matcher specified. Set a matcher with match()");
        helpers_1.assert(this.commands.length > 0, "No commands specified. Set commands with setCommands()");
        const { matcher, metadata, middleware, commands } = this;
        return new CommandGroup_1.CommandGroup({ matcher, middleware, commands, metadata });
    }
}
exports.CommandGroupBuilder = CommandGroupBuilder;
//# sourceMappingURL=CommandGroupBuilder.js.map