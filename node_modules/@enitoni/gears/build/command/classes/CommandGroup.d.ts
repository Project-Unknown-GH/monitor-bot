import { ArrayResolvable } from "../../core";
import { BaseContext, Chain, CommandLike, Matcher, Middleware } from "../types";
/**
 * Options passed to the [[CommandGroup]] constructor
 * @category Command
 */
export interface CommandGroupOptions<M, C, D> {
    matcher: Matcher<any, M, C>;
    commands: CommandLike<M, C>[];
    middleware?: ArrayResolvable<Middleware<any, M, C>>;
    /** Custom metadata */
    metadata?: D;
}
/**
 * A group of [[Command]], which will only match if the [[Matcher]] and a command in the group matches
 * @example
 * const group = new CommandGroup({
 *   matcher: matchPrefixes("!"),
 *   commands: [sumCommand]
 * })
 *
 * // Input: "!sum 2 2"
 * // Output: "The sum is: 4"
 *
 * // Input: "!something"
 * // Output: nothing
 *
 * // Input: "?sum 5 3"
 * // Output: nothing
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @category Command
 */
export declare class CommandGroup<M, C, D = unknown> implements CommandLike<M, C> {
    readonly metadata?: D;
    middleware: Middleware<any, M, C>[];
    commands: CommandLike<M, C>[];
    private matcher;
    constructor(options: CommandGroupOptions<M, C, D>);
    /**
     * @category Internal
     */
    getChain(context: BaseContext<M, C>): Promise<Chain<M, C> | void>;
}
export declare type CommandGroupType<M, C, D = unknown> = new (options: CommandGroupOptions<M, C, D>) => CommandGroup<M, C, D>;
