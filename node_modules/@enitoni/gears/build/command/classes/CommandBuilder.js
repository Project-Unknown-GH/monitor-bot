"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../../core/helpers");
const Command_1 = require("./Command");
/**
 * A way to build a [[Command]] with the builder pattern.
 * If you are using TypeScript, this is more typesafe to use
 * @example
 * const command = new CommandBuilder()
 *   .match(matchAlways())
 *   .use((context) => {
 *     console.log("You said ", context.content)
 *   })
 *   .done()
 *
 * // Input: "Hi"
 * // Output: "You said Hi"
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @template S State
 * @category Command
 */
class CommandBuilder {
    constructor() {
        this.middleware = [];
    }
    /**
     * Set [[Matcher]]
     */
    match(matcher) {
        helpers_1.assert(!this.matcher, "Cannot use match() more than once");
        this.matcher = matcher;
        return this;
    }
    setMetadata(data) {
        this.metadata = data;
        return this;
    }
    /**
     * Add [[Middleware]]. The order that you call this is the order the middleware will be in
     */
    use(middleware) {
        this.middleware.push(middleware);
        return this;
    }
    /**
     * Returns the built [[Command]]
     */
    done() {
        helpers_1.assert(!!this.matcher, "No matcher specified. Set a matcher with match()");
        helpers_1.assert(this.middleware.length > 0, "No middleware specified. Add middleware with use()");
        const { matcher, metadata, middleware } = this;
        return new Command_1.Command({ matcher, middleware, metadata });
    }
}
exports.CommandBuilder = CommandBuilder;
//# sourceMappingURL=CommandBuilder.js.map