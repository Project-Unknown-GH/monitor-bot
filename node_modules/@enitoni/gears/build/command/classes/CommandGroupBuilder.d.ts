import { CommandLike, Matcher, Middleware } from "../types";
import { CommandGroup } from "./CommandGroup";
/**
 * A way to build a [[CommandGroup]] with the builder pattern.
 * If you are using TypeScript, this is more typesafe to use
 * @example
 * const group = new CommandGroupBuilder()
 *   .match(matchAlways())
 *   .setCommands(sum, multiply)
 *   .use(() => {
 *     console.log("I am a piece of middleware")
 *   })
 *   .done()
 *
 * // Input: "sum 1 2 3 4"
 * // Output: "I am a piece of middleware"
 * // Output: "The sum is: 10"
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @template S State
 * @category Command
 */
export declare class CommandGroupBuilder<M, C, D = any, S extends object = {}> {
    private commands;
    private metadata;
    private matcher;
    private middleware;
    /**
     * Set [[Matcher]]
     */
    match<T extends object>(matcher: Matcher<T & S, M, C>): CommandGroupBuilder<M, C, D, T & S>;
    setMetadata<T extends D>(data: T): CommandGroupBuilder<M, C, T, S>;
    /**
     * Add [[Middleware]]. The order that you call this is the order the middleware will be in
     */
    use<T extends object>(middleware: Middleware<T & S, M, C>): CommandGroupBuilder<M, C, D, T & S>;
    /**
     * Set the commands for this [[CommandGroup]]
     */
    setCommands(...commands: CommandLike<M, C>[]): this;
    done(): CommandGroup<M, C, D>;
}
export declare type CommandGroupBuilderType<M, C, D = unknown> = new () => CommandGroupBuilder<M, C, D>;
