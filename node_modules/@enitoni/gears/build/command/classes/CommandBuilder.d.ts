import { Matcher, Middleware } from "../types";
import { Command } from "./Command";
/**
 * A way to build a [[Command]] with the builder pattern.
 * If you are using TypeScript, this is more typesafe to use
 * @example
 * const command = new CommandBuilder()
 *   .match(matchAlways())
 *   .use((context) => {
 *     console.log("You said ", context.content)
 *   })
 *   .done()
 *
 * // Input: "Hi"
 * // Output: "You said Hi"
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @template S State
 * @category Command
 */
export declare class CommandBuilder<M, C, D = any, S extends object = {}> {
    private metadata;
    private matcher;
    private middleware;
    /**
     * Set [[Matcher]]
     */
    match<T extends object>(matcher: Matcher<T & S, M, C>): CommandBuilder<M, C, D, T & S>;
    setMetadata<T extends D>(data: T): CommandBuilder<M, C, T, S>;
    /**
     * Add [[Middleware]]. The order that you call this is the order the middleware will be in
     */
    use<T extends object>(middleware: Middleware<T & S, M, C>): CommandBuilder<M, C, D, T & S>;
    /**
     * Returns the built [[Command]]
     */
    done(): Command<M, C, D>;
}
export declare type CommandBuilderType<M, C, D = unknown> = new () => CommandBuilder<M, C, D>;
