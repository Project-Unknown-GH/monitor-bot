"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../../core/helpers");
/**
 * A group of [[Command]], which will only match if the [[Matcher]] and a command in the group matches
 * @example
 * const group = new CommandGroup({
 *   matcher: matchPrefixes("!"),
 *   commands: [sumCommand]
 * })
 *
 * // Input: "!sum 2 2"
 * // Output: "The sum is: 4"
 *
 * // Input: "!something"
 * // Output: nothing
 *
 * // Input: "?sum 5 3"
 * // Output: nothing
 * @template M Message
 * @template C Client
 * @template D Metadata
 * @category Command
 */
class CommandGroup {
    constructor(options) {
        const { metadata, matcher, commands, middleware = [] } = options;
        this.metadata = metadata;
        this.matcher = matcher;
        this.commands = commands;
        this.middleware = helpers_1.resolveToArray(middleware);
    }
    /**
     * @category Internal
     */
    getChain(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const newContext = Object.assign({}, context, { issuer: this });
            const resultContext = yield this.matcher(newContext);
            if (!resultContext)
                return;
            for (const command of this.commands) {
                const chain = yield command.getChain(resultContext);
                if (chain)
                    return [{ command: this, context: Object.assign({}, resultContext) }, ...chain];
            }
        });
    }
}
exports.CommandGroup = CommandGroup;
//# sourceMappingURL=CommandGroup.js.map