"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Match when the message starts with any of the provided keywords.
 * Removes the matching keyword from the [[Context]] content
 * @example
 * matchPrefixes("Hi", "Hello", "Hola")
 *
 * // Matching: "Hi"
 * // Matching: "Hello"
 * // Matching: "Hola"
 * // Not matching: "Goodbye"
 * @category Matching
 */
exports.matchPrefixes = (...keywords) => (context) => __awaiter(this, void 0, void 0, function* () {
    const escaped = keywords.map(s => s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"));
    const regex = new RegExp(`^(${escaped.join("|")})`, "i");
    const isMatching = !!context.content.match(regex);
    if (!isMatching)
        return;
    const newContent = context.content.replace(regex, "").trim();
    return Object.assign({}, context, { content: newContent });
});
//# sourceMappingURL=matchPrefixes.js.map