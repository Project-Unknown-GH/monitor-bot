"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a, _b, _c;
"use strict";
const symbols_1 = require("../symbols");
/**
 * Manages instantiation and lifecycles of [[Service]]
 * @category Service
 */
class ServiceManager {
    constructor(bot, services) {
        this[_a] = () => __awaiter(this, void 0, void 0, function* () {
            for (const service of this.services) {
                yield service[symbols_1.SERVICE_INITIALIZE]();
            }
        });
        this[_b] = () => __awaiter(this, void 0, void 0, function* () {
            for (const service of this.services) {
                yield service[symbols_1.SERVICE_START]();
            }
        });
        this[_c] = () => __awaiter(this, void 0, void 0, function* () {
            for (const service of this.services) {
                yield service[symbols_1.SERVICE_STOP]();
            }
        });
        /**
         * Get a service from the manager. Will throw if service does not exist
         * @returns A [[Service]] instance
         */
        this.getService = (serviceClass) => {
            const service = this.services.find(s => s instanceof serviceClass);
            if (!service)
                throw new Error(`Service "${serviceClass.name}" not found in manager`);
            return service;
        };
        /**
         * Check if a [[Service]] exists in the manager
         * @returns True if the service exists, false if not
         */
        this.hasService = (serviceClass) => {
            return !!this.services.find(s => s instanceof serviceClass);
        };
        this.services = services.map(S => {
            return new S({ bot, manager: this }, symbols_1.SERVICE_CONSTRUCTOR);
        });
    }
}
_a = symbols_1.MANAGER_INITIALIZE, _b = symbols_1.MANAGER_START, _c = symbols_1.MANAGER_STOP;
exports.ServiceManager = ServiceManager;
//# sourceMappingURL=ServiceManager.js.map