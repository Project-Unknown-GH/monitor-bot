import { Bot } from "../../bot/classes";
import { ServiceManager } from "./ServiceManager";
import { SERVICE_INITIALIZE, SERVICE_START, SERVICE_STOP } from "../symbols";
/**
 * Options passed to the [[Service]] constructor
 * @category Service
 */
export interface ServiceOptions<M, C> {
    bot: Bot<M, C>;
    manager: ServiceManager<M, C>;
}
/**
 * Stateful business logic living outside of [[Middleware]]
 * @example
 * class IncrementService extends Service {
 *   serviceDidInitialize() {
 *     this.counter = 0
 *     this.increment = () => this.counter++
 *   }
 * }
 *
 * const command = new CommandBuilder()
 *   .match(matchPrefixes("increment"))
 *   .use((context) => {
 *     const { manager } = context
 *
 *     const service = manager.getService(IncrementService)
 *     service.increment()
 *
 *     console.log("The counter is now", service.counter)
 *   })
 *   .done()
 *
 * const bot = new Bot({
 *   services: [IncrementService],
 *   commands: [command],
 * })
 *
 * // Input: "increment"
 * // Output: "The counter is now 1"
 *
 * // Input: "increment"
 * // Output: "The counter is now 2"
 * @template M Message
 * @template C Client
 * @category Service
 */
export declare class Service<M, C> {
    private didStart;
    protected bot: Bot<M, C>;
    protected manager: ServiceManager<M, C>;
    /**
     * @warning Do not manually instantiate a service. Services are automatically instantiated by the [[ServiceManager]]
     */
    constructor(options: ServiceOptions<M, C>, s: symbol);
    [SERVICE_INITIALIZE](): Promise<void>;
    [SERVICE_START](): Promise<void>;
    [SERVICE_STOP](): Promise<void>;
    /**
     * Hook called when the service has initialized, but the bot is ready
     */
    protected serviceDidInitialize(): Promise<void> | void;
    /**
     * Hook called when the service has started and the bot is ready
     */
    protected serviceDidStart(): Promise<void> | void;
    /**
     * Hook called when the service has started after stopping
     */
    protected serviceDidRestart(): Promise<void> | void;
    /**
     * Hook called when the service has stopped and the bot is offline
     */
    protected serviceDidStop(): Promise<void> | void;
}
