import { Bot } from "../../bot/classes";
import { Service, ServiceOptions } from "./Service";
import { MANAGER_INITIALIZE, MANAGER_START, MANAGER_STOP } from "../symbols";
/**
 * Service class type
 * @category Internal
 */
export declare type ServiceType<M, C, T = Service<M, C>> = new (options: ServiceOptions<M, C>, s: symbol) => T;
/**
 * Manages instantiation and lifecycles of [[Service]]
 * @category Service
 */
export declare class ServiceManager<M, C> {
    private services;
    constructor(bot: Bot<M, C>, services: ServiceType<M, C>[]);
    [MANAGER_INITIALIZE]: () => Promise<void>;
    [MANAGER_START]: () => Promise<void>;
    [MANAGER_STOP]: () => Promise<void>;
    /**
     * Get a service from the manager. Will throw if service does not exist
     * @returns A [[Service]] instance
     */
    getService: <T extends Service<M, C>>(serviceClass: ServiceType<M, C, T>) => T;
    /**
     * Check if a [[Service]] exists in the manager
     * @returns True if the service exists, false if not
     */
    hasService: (serviceClass: ServiceType<M, C, Service<M, C>>) => boolean;
}
