import { CommandGroup, Command } from "../../command/classes";
import { CommandLike } from "../../command/types";
import { Emitter } from "../../core/classes";
import { ServiceManager, ServiceType } from "../../service/classes";
import { ClientAdapter } from "./ClientAdapter";
/**
 * Events fired by a [[Bot]] instance
 * @category Bot
 */
export interface BotEvents<M, C> {
    /**
     * The [[Bot]] has initialized but not started.
     * Use this to add bot specific configurations via [[Service]]
     */
    init: void;
    /**
     *  A [[Command]] was executed
     */
    command: [Command<M, C>, M];
    /**
     * A response was returned from the called [[Middleware]]
     */
    response: {
        response: any;
        command: Command<M, C>;
        message: M;
    };
    /**
     * An error occurred
     */
    error: any;
}
/**
 * Options passed to the [[Bot]] constructor.
 * @category Bot
 */
export interface BotOptions<M, C> {
    adapter: ClientAdapter<M, C>;
    commands: CommandLike<M, C>[];
    services?: ServiceType<M, C>[];
}
/**
 * Starting point for your Gears app. Contains the [[ServiceManager]] and the root [[CommandGroup]]
 * @example
 * const bot = new Bot({ adapter, commands: [sum, multiply] })
 * @template M Message
 * @template C Client
 * @category Bot
 */
export declare class Bot<M, C> extends Emitter<BotEvents<M, C>> {
    private adapter;
    readonly group: CommandGroup<M, C>;
    readonly manager: ServiceManager<M, C>;
    constructor(options: BotOptions<M, C>);
    /**
     * Asynchronously starts the bot
     */
    start(): Promise<void>;
    /**
     * Manually run a message through the command chain. This method gets called automatically by the [[ClientAdapter]].
     */
    processMessage: (message: M) => Promise<{
        response: any;
        message: M;
        command: Command<M, C, unknown>;
    } | undefined>;
    private handleReady;
    private handleUnready;
    private handleError;
    /**
     * Get the client from the adapter
     */
    readonly client: C;
}
