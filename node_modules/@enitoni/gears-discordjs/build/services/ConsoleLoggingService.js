"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const chalk_1 = __importDefault(require("chalk"));
const colorMap = {
    success: chalk_1.default.green,
    info: chalk_1.default.cyan,
    error: chalk_1.default.red,
    warning: chalk_1.default.yellow
};
/** Logs general information, warnings, and errors to the console */
class ConsoleLoggingService extends __1.Service {
    serviceDidInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const { log, bot } = this;
            const { client } = bot;
            client.on("ready", () => log("Connected"));
            client.on("resume", () => log("Reconnected", "success"));
            client.on("reconnecting", () => log("Reconnecting...", "warning"));
            client.on("disconnect", () => log("Disconnected", "error"));
            client.on("rateLimit", () => log("Bot is being rate limited", "warning"));
            client.on("warn", warning => log(warning, "warning"));
            client.on("error", error => log(error.toString(), "error"));
            bot.on("error", error => log(error.toString(), "warning"));
        });
    }
    log(message, type = "info") {
        const date = new Date();
        const coloredDate = chalk_1.default.grey(`${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
        const coloredMessage = colorMap[type](message);
        console.log(`${coloredDate} - ${coloredMessage}`);
    }
}
exports.ConsoleLoggingService = ConsoleLoggingService;
//# sourceMappingURL=ConsoleLoggingService.js.map